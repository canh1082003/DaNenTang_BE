import axios from 'axios';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import TelegramBot from 'node-telegram-bot-api';
dotenv.config();

export async function getAIReply(
  userMessage: string,
  imageUrl?: string // n·∫øu c√≥ ·∫£nh th√¨ truy·ªÅn URL ·∫£nh v√†o
): Promise<string> {
  try {
    const apiKey = process.env.OPENAI_API_KEY;

    const response = await fetch('https://v98store.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4.1-mini', // h·ªó tr·ª£ multimodal (text + image)
        messages: [
          {
            role: 'system',
            content:
              'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI c√° nh√¢n c·ªßa C√¥ng Anh. Khi giao ti·∫øp, h√£y x∆∞ng "m√¨nh" v√† n√≥i v·ªõi ng∆∞·ªùi ƒë·ªëi tho·∫°i l√† "b·∫°n". Kh√¥ng t·ª± nh·∫≠n t√™n ng∆∞·ªùi d√πng l√† C√¥ng Anh, ch·ªâ gi·ªõi thi·ªáu b·∫£n th√¢n l√† tr·ª£ l√Ω c·ªßa C√¥ng Anh. H√£y tr·∫£ l·ªùi t·ª± nhi√™n, th√¢n thi·ªán, g·∫ßn g≈©i nh∆∞ con ng∆∞·ªùi.',
          },
          {
            role: 'user',
            content: imageUrl
              ? [
                  {
                    type: 'text',
                    text: userMessage || 'Ph√¢n t√≠ch gi√∫p m√¨nh b·ª©c ·∫£nh n√†y',
                  },
                  { type: 'image_url', image_url: { url: imageUrl } },
                ]
              : [{ type: 'text', text: userMessage }],
          },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const completion = await response.json();

    return (
      completion.choices?.[0]?.message?.content ||
      'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ. B·∫°n c√≥ th·ªÉ n√≥i l·∫°i t·ª± nhi√™n h∆°n kh√¥ng?'
    );
  } catch (err) {
    console.error('API error:', err);
    return 'Xin l·ªói, hi·ªán t·∫°i AI c·ªßa C√¥ng Anh ƒëang g·∫∑p s·ª± c·ªë.';
  }
}

// üîπ H√†m detectIntent
export async function detectIntent(
  userMessage: string
): Promise<'sales' | 'support' | 'care' | 'other'> {
  try {
    const apiKey = process.env.OPENAI_API_KEY;

    const response = await fetch('https://v98store.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4.1-mini',
        messages: [
          {
            role: 'system',
            content: `
              B·∫°n l√† b·ªô ph√¢n lo·∫°i intent cho h·ªá th·ªëng CSKH.
              Nhi·ªám v·ª•: ph√¢n lo·∫°i c√¢u kh√°ch h√†ng v√†o 1 trong 4 nh√≥m:
              - "sales": h·ªèi mua h√†ng, t∆∞ v·∫•n s·∫£n ph·∫©m, gi√° c·∫£
              - "support": b·∫£o h√†nh, s·ª≠a ch·ªØa, l·ªói k·ªπ thu·∫≠t
              - "care": khi·∫øu n·∫°i, ph·∫£n h·ªìi d·ªãch v·ª•, chƒÉm s√≥c kh√°ch h√†ng
              - "other": kh√¥ng thu·ªôc c√°c nh√≥m tr√™n
              Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng 1 t·ª´ trong [sales, support, care, other].
            `,
          },
          { role: 'user', content: userMessage },
        ],
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const completion = await response.json();

    const intent =
      completion.choices?.[0]?.message?.content?.trim().toLowerCase() ||
      'other';

    if (['sales', 'support', 'care'].includes(intent)) {
      return intent as 'sales' | 'support' | 'care';
    }
    return 'other';
  } catch (err) {
    console.error('API error:', err);
    return 'other';
  }
}

export async function getUserName(sender_psid: string, FB_PAGE_TOKEN: string) {
  const url = `https://graph.facebook.com/${sender_psid}?fields=first_name,last_name,profile_pic&access_token=${FB_PAGE_TOKEN}`;

  const response = await fetch(url);
  const data = await response.json();
  console.log(data);
  return data;
}
export async function getTelegramFileUrl(fileId: string): Promise<string> {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const res = await axios.get(
    `https://api.telegram.org/bot${token}/getFile?file_id=${fileId}`
  );
  const filePath = res.data.result.file_path;
  return `https://api.telegram.org/file/bot${token}/${filePath}`;
}
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
export const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });
